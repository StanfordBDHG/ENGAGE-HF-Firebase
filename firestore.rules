rules_version = '2';
service cloud.firestore {
  match /databases/{databaseId}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated()
        && orNull(request.auth.token, 'type') == 'admin'
    }

    function isOwner(organizationId) {
      return isAuthenticated()
        && orNull(request.auth.token, 'organization') == organizationId
        && orNull(request.auth.token, 'isOwner') == true;
    }

    function isClinician(organizationId) {
      return isAuthenticated()
        && orNull(request.auth.token, 'type') == 'clinician'
        && orNull(request.auth.token, 'organization') == organizationId;
    }
    
    function isUser(userId) {
      return isAuthenticated()
        && request.auth.uid == userId;
    }

    function getUser(userId) {
      return get(/databases/$(databaseId)/documents/users/$(userId));
    }

    function orNull(object, propertyName) {
      return (propertyName in object) ? object[propertyName] : null;
    }

    match /invitations/{invitationId} {
      function organizationDidNotChange() {
        return orNull(request.resource.data.user, 'organization') == orNull(resource.data.user, 'organization')
      }

      allow read: if isAdmin() || (
        (resource != null) && ('data' in resource) && ('user' in resource.data) && (
          isOwner(orNull(resource.data.user, 'organization'))
            || isClinician(orNull(resource.data.user, 'organization'))
        )
      );
      allow create: if isAdmin();
      allow update: if isAdmin() || (
        organizationDidNotChange() && (
          isOwner(orNull(resource.data.user, 'organization'))
            || isClinician(orNull(resource.data.user, 'organization'))
        )
      );
      allow delete: if isAdmin() || (
        ('user' in resource.data) && (
          isOwner(orNull(resource.data.user, 'organization'))
            || isClinician(orNull(resource.data.user, 'organization'))
        )
      );
    }

    match /medications/{documents=**} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    match /organizations/{organizationId} {
      allow read: if isAuthenticated()
      allow update: if isAdmin() || isOwner(organizationId);
      allow create, delete: if isAdmin();
    }

    match /questionnaires/{questionnaireId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    match /users/{userId} {
      function securityRelatedFieldsDidNotChange() {
        return (request.resource.data == null) || (resource.data == null) || (
          orNull(request.resource.data, 'type') == orNull(resource.data, 'type')
            && orNull(request.resource.data, 'organization') == orNull(resource.data, 'organization')
        );
      }

      allow read: if isAdmin() 
        || isUser(userId) 
        || isOwner(orNull(resource.data, 'organization'))
        || isClinician(orNull(resource.data, 'organization'));

      allow create: if isAdmin() || (
        isUser(userId)
          && !('organization' in request.resource.data)
          && !('type' in request.resource.data)
      );

      allow update: if isAdmin() || (
        securityRelatedFieldsDidNotChange() && (
          isUser(userId)
            || isOwner(orNull(resource.data, 'organization'))
            || isClinician(orNull(resource.data, 'organization'))
        )
      );

      allow delete: if isAdmin();
    }

    match /users/{userId}/{collectionName}/{documentId} {
      function isPatientWritableCollectionName() {
        return collectionName.matches('/^[A-Za-z]+Observations$/')
          || collectionName == 'questionnaireResponses';
      }

      function isClinicianWritableCollectionName() {
        return collectionName == 'allergyIntolerances'
          || collectionName == 'appointments'
          || collectionName == 'medicationRequests'
          || collectionName == 'medicationRecommendations'
          || collectionName == 'symptomScores'
          || collectionName == 'messages';
      }

      function isClinicianReadable() {
        let user = getUser(userId);
        return isAdmin() 
          || isOwner(orNull(user, 'organization'))
          || isClinician(orNull(user, 'organization'));
      }

      function isClinicianWritable() {
        let user = getUser(userId);
        return isAdmin() || (
          isClinicianWritableCollectionName() && (
            isOwner(orNull(user, 'organization'))
              || isClinician(orNull(user, 'organization'))
          )
        );
      }

      allow read: if isAuthenticated() && (isUser(userId) || isClinicianReadable());
      allow write: if isAuthenticated() && (
        (isUser(userId) && isPatientWritableCollectionName())
          || isClinicianWritable()
      );
    }

    match /videoSections/{documents=**} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
  }
}
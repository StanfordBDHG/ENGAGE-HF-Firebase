rules_version = '2';
service cloud.firestore {
  match /databases/{databaseId}/documents {
    function isAuthenticated(request) {
      return request.auth != null
    }

    function isOwner(request, organizationId) {
      return isAuthenticated(request) 
        && request.auth.uid in get(/databases/$(databaseId)/documents/organizations/$(organizationId)).data.owners
    }

    function isUser(request, userId) {
      return isAuthenticated(request) && request.auth.uid == userId
    }

    function getUser(userId) {
      return get(/databases/$(databaseId)/documents/users/$(userId)).data
    }

    match /invitations/{invitationId} {
      allow read, write: if isAuthenticated(request) && (
        (getUser(request.auth.uid).type in ['admin', 'clinician']) 
        || isOwner(request, request.resource.data.user.organization)
      )
    }

    match /medications/{documents=**} {
      allow read: if isAuthenticated(request)
      allow read, write: if isAuthenticated(request) && getUser(request).type == 'admin'
    }

    match /organizations/{organizationId} {
      allow read: if isAuthenticated(request)
      allow update: if isAuthenticated(request) && (isOwner(request, organizationId) || getUser(request.auth.uid).type == 'admin')
      allow create, delete: if isAuthenticated(request) && getUser(request.auth.uid).type == 'admin'
    }

    match /questionnaires/{questionnaireId} {
      allow read: if isAuthenticated(request)
      allow read, write: if isAuthenticated(request) && getUser(request.auth.uid).type == 'admin'
    }

    match /users/{userId} {
      function isAllowedUserRead(request) {
        let authUser = getUser(request.auth.uid)
        return authUser.type == 'admin'
          || (authUser.type == 'clinician' && authUser.organization == resource.data.organization)
          || (authUser.type == 'patient' && authUser.organization == resource.data.organization)
          || isOwner(request, resource.data.organization)
      }

      function isAllowedUserUpdate(request) {
        let authUser = getUser(request.auth.uid)
        return authUser.type == 'admin' || (
          !('organization' in request.resource.data) && (
            (authUser.type == 'clinician' && authUser.organization == resource.data.organization)
            || (authUser.type == 'patient' && authUser.organization == resource.data.organization)
            || isOwner(request, resource.data.organization)
            || isUser(request, userId)
          )
        )
      }

      allow read: if isAuthenticated(request) && isAllowedUserRead(request)
      allow update: if isAuthenticated(request) && isAllowedUserUpdate(request)
      allow create, delete: if isAuthenticated(request) && getUser(request.auth.uid).type == 'admin'

      match /{collection}/{documentId} {
        function isPatientWritable() {
          return collectionName.matches('/^[A-Za-z]+Observations$/')
            || collectionName == 'questionnaireResponses'
        }

        function isExternalWritable() {
          return collectionName == 'allergyIntolerances' 
            || collectionName == 'appointments' 
            || collectionName == 'medicationRequests' 
            || collectionName == 'medicationRecommendations'
            || collectionName == 'symptomScores'
            || collectionName == 'messages'
        }

        function isAllowedUserCollectionRead(request) {
          let authUser = getUser(request.auth.uid)
          let user = getUser(userId)
          return authUser.type == 'admin'
            || (authUser.type == 'clinician' && authUser.organization == user.organization)
            || (authUser.type == 'patient' && authUser.organization == user.organization)
            || isOwner(request, user.organization)
        }

        function isAllowedUserCollectionWrite(request) {
          let authUser = getUser(request.auth.uid)
          let user = getUser(userId)
          return authUser.type == 'admin' || (
            isExternalWritable() && (
              (authUser.type == 'clinician' && authUser.organization == user.organization)
              || (authUser.type == 'patient' && authUser.organization == user.organization)
              || isOwner(request, user.organization)
            )
          )
        }

        allow read: if isAuthenticated(request) && (
          isUser(request, userId) 
          || isAllowedUserCollectionRead(request)
        )
        allow write: if isAuthenticated(request) && (
          (isUser(request, userId) && isPatientWritable())
          || isAllowedUserCollectionWrite(request)
        )
      }
    }

    match /videoSections/{documents=**} {
      allow read: if isAuthenticated(request)
      allow write: if isAuthenticated(request) && getUser(request.auth.uid).type == 'admin'
    }
  }
}
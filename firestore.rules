rules_version = '2';
service cloud.firestore {
  match /databases/{databaseId}/documents {
    function isAuthenticated(request) {
      return request.auth != null
    }

    function isAdmin(request) {
      return isAuthenticated(request)
        && ('type' in request.auth.token)
        && request.auth.token.type == 'admin'
    }

    function isOwner(request, organizationId) {
      return isAuthenticated(request)
        && ('organization' in request.auth.token)
        && request.auth.token.organization == organizationId
        && ('isOwner' in request.auth.token)
        && request.auth.token.isOwner == true
    }

    function isClinician(request, organizationId) {
      return isAuthenticated(request)
        && ('type' in request.auth.token)
        && request.auth.token.type == 'clinician'
        && ('organization' in request.auth.token)
        && request.auth.token.organization == organizationId
    }
    
    function isUser(request, userId) {
      return isAuthenticated(request) 
        && request.auth.uid == userId
    }

    function getUser(userId) {
      return get(/databases/$(databaseId)/documents/users/$(userId))
    }

    match /invitations/{invitationId} {
      function organizationDidNotChange(request, resource) {
        return ('organization' in request.resource.data.user)
          ? (('organization' in resource.data) && request.resource.data.user.organization == resource.data.user.organization)
          : !('organization' in resource.data)
      }

      allow read, delete: if isAdmin(request) || (
        ('organization' in resource.data.user) && (
          isOwner(request, resource.data.user.organization)
          || isClinician(request, resource.data.user.organization)
        )
      )
      allow create: if isAdmin(request)
      allow update: if isAdmin(request) || (
        organizationDidNotChange(request, resource) && (
          isOwner(request, resource.data.user.organization)
          || isClinician(request, resource.data.user.organization)
        )
      )
    }

    match /medications/{documents=**} {
      allow read: if isAuthenticated(request)
      allow write: if isAdmin(request)
    }

    match /organizations/{organizationId} {
      allow read: if isAuthenticated(request)
      allow update: if isAdmin(request) || isOwner(request, organizationId)
      allow create, delete: if isAdmin(request)
    }

    match /questionnaires/{questionnaireId} {
      allow read: if isAuthenticated(request)
      allow write: if isAdmin(request)
    }

    match /users/{userId} {
      function organizationDidNotChange(request, resource) {
        return ('organization' in request.resource.data)
          ? (('organization' in resource.data) && request.resource.data.organization == resource.data.organization)
          : !('organization' in resource.data)
      }

      function typeDidNotChange(request, resource) {
        return ('type' in request.resource.data)
          ? (('type' in resource.data) && request.resource.data.type == resource.data.type)
          : !('type' in resource.data)
      }

      function securityRelatedFieldsDidNotChange(request, resource) {
        return typeDidNotChange(request, resource) && organizationDidNotChange(request, resource)
      }

      allow read: if isAdmin(request) || isUser(request, userId) || (
        ('organization' in resource.data) && (
          isOwner(request, resource.data.organization)
          || isClinician(request, resource.data.organization)
        )
      )

      allow create: if isAdmin(request) || (
        isUser(request, userId)
        && !('organization' in request.resource.data)
        && !('type' in request.resource.data)
      )

      allow update: if isAdmin(request) || (
        resource != null && securityRelatedFieldsDidNotChange(request, resource) && (
          isUser(request, userId) || (
            ('organization' in resource.data) && (
              isOwner(request, resource.data.organization)
              || isClinician(request, resource.data.organization)
            )
          )
        )
      )

      allow delete: if isAdmin(request)
    }

    match /users/{userId}/{collectionName}/{documentId} {
      function isPatientWritableCollectionName() {
        return collectionName.matches('/^[A-Za-z]+Observations$/')
          || collectionName == 'questionnaireResponses'
      }

      function isClinicianWritableCollectionName() {
        return collectionName == 'allergyIntolerances'
          || collectionName == 'appointments'
          || collectionName == 'medicationRequests'
          || collectionName == 'medicationRecommendations'
          || collectionName == 'symptomScores'
          || collectionName == 'messages'
      }

      function isClinicianReadable(request) {
        let user = getUser(userId);
        return isAdmin(request)
          || isOwner(request, user.organization)
          || isClinician(request, user.organization)
      }

      function isClinicianWritable(request) {
        let user = getUser(userId);
        return isAdmin(request) || (
          isClinicianWritableCollectionName() && (
            isOwner(request, user.organization)
            || isClinician(request, user.organization)
          )
        )
      }

      allow read: if isAuthenticated(request) && (
        isUser(request, userId)
        || isClinicianReadable(request)
      )
      allow write: if isAuthenticated(request) && (
        (isUser(request, userId) && isPatientWritableCollectionName())
        || isClinicianWritable(request)
      )
    }

    match /videoSections/{documents=**} {
      allow read: if isAuthenticated(request)
      allow write: if isAdmin(request)
    }
  }
}